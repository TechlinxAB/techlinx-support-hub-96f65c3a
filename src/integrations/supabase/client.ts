
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uaoeabhtbynyfzyfzogp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVhb2VhYmh0YnlueWZ6eWZ6b2dwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MjQzNzksImV4cCI6MjA2MjEwMDM3OX0.hqJiwG2IQindO2LVBg4Rhn42FvcuZGAAzr8qDMhFBTQ";

// Ensure localStorage is available and working
const getLocalStorageProvider = () => {
  // Check for localStorage availability
  if (typeof window === 'undefined' || !window.localStorage) {
    console.warn("localStorage is not available - using memory storage");
    // Create in-memory storage fallback
    let memoryStorage: Record<string, string> = {};
    
    return {
      getItem: (key: string) => memoryStorage[key] || null,
      setItem: (key: string, value: string) => { memoryStorage[key] = value },
      removeItem: (key: string) => { delete memoryStorage[key] },
      clear: () => { memoryStorage = {} }
    };
  }
  
  // Use localStorage with error handling and memory fallbacks
  const memoryFallback: Record<string, string> = {};
  
  return {
    getItem: (key: string) => {
      try {
        return window.localStorage.getItem(key) || memoryFallback[key] || null;
      } catch (e) {
        console.error("localStorage.getItem failed:", e);
        return memoryFallback[key] || null;
      }
    },
    setItem: (key: string, value: string) => {
      try {
        window.localStorage.setItem(key, value);
        memoryFallback[key] = value; // Also store in memory
      } catch (e) {
        console.error("localStorage.setItem failed:", e);
        memoryFallback[key] = value; // Store in memory fallback
      }
    },
    removeItem: (key: string) => {
      try {
        window.localStorage.removeItem(key);
        delete memoryFallback[key];
      } catch (e) {
        console.error("localStorage.removeItem failed:", e);
        delete memoryFallback[key];
      }
    },
    clear: () => {
      try {
        // Only clear Supabase-related items
        Object.keys(window.localStorage).forEach(key => {
          if (key.startsWith('supabase.auth.')) {
            window.localStorage.removeItem(key);
          }
        });
        
        // Clear memory fallback
        Object.keys(memoryFallback).forEach(key => {
          if (key.startsWith('supabase.auth.')) {
            delete memoryFallback[key];
          }
        });
      } catch (e) {
        console.error("localStorage.clear failed:", e);
        // Still clear memory fallback
        Object.keys(memoryFallback).forEach(key => {
          if (key.startsWith('supabase.auth.')) {
            delete memoryFallback[key];
          }
        });
      }
    }
  };
};

// Create Supabase client with robust configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      storage: getLocalStorageProvider(),
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'implicit'
    }
  }
);

// Function to clear auth data from local storage
export const clearAuthData = () => {
  if (typeof window === "undefined") return;
  
  console.log("Clearing auth data from local storage");
  
  try {
    // Clear all Supabase auth related items from localStorage
    Object.keys(window.localStorage).forEach(key => {
      if (key.startsWith('supabase.auth.')) {
        window.localStorage.removeItem(key);
      }
    });
    
    // Also try the client's logout
    supabase.auth.signOut({ scope: 'local' }).catch(err => {
      console.warn("Error during local signout:", err);
    });
  } catch (error) {
    console.error('Error clearing auth data:', error);
  }
};

// Simple function to check for a valid session
export const hasValidSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    return !!data.session && !error;
  } catch (err) {
    console.error("Session check failed:", err);
    return false;
  }
};
