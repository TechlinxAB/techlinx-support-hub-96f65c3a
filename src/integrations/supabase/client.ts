
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uaoeabhtbynyfzyfzogp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVhb2VhYmh0YnlueWZ6eWZ6b2dwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MjQzNzksImV4cCI6MjA2MjEwMDM3OX0.hqJiwG2IQindO2LVBg4Rhn42FvcuZGAAzr8qDMhFBTQ";

// Storage key used by Supabase SDK
export const STORAGE_KEY = 'sb-uaoeabhtbynyfzyfzogp-auth-token';

// SINGLETON IMPLEMENTATION: Ensure only one client instance is ever created
// This prevents multiple re-initializations that can cause race conditions
let clientInstance: ReturnType<typeof createClient<Database>> | null = null;

// Create a custom storage implementation that falls back to memory storage if localStorage isn't available
const createFallbackStorage = () => {
  // In-memory storage fallback
  const inMemoryStorage = new Map<string, string>();
  
  // Only log once during app initialization to reduce console noise
  if (!clientInstance) {
    console.log("Initializing storage mechanism");
  }
  
  return {
    getItem: (key: string) => {
      try {
        // Try localStorage first
        const localStorageValue = localStorage.getItem(key);
        if (localStorageValue !== null) {
          return localStorageValue;
        }
        
        // Fall back to in-memory if needed
        return inMemoryStorage.get(key) || null;
      } catch (error) {
        return inMemoryStorage.get(key) || null;
      }
    },
    setItem: (key: string, value: string) => {
      try {
        // Try localStorage first
        localStorage.setItem(key, value);
      } catch (error) {
        inMemoryStorage.set(key, value);
      }
    },
    removeItem: (key: string) => {
      try {
        // Try localStorage first
        localStorage.removeItem(key);
      } catch (error) {
        inMemoryStorage.delete(key);
      }
    },
    clear: () => {
      try {
        localStorage.clear();
      } catch (error) {
        inMemoryStorage.clear();
      }
    }
  };
};

// Function to create or get the Supabase client instance
const getSupabaseClient = () => {
  if (clientInstance) {
    return clientInstance;
  }

  // Create the client if it doesn't exist
  clientInstance = createClient<Database>(
    SUPABASE_URL, 
    SUPABASE_PUBLISHABLE_KEY,
    {
      auth: {
        storage: createFallbackStorage(),
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: false, // Prevent auto-detection of OAuth redirects to avoid loops
        flowType: 'implicit', // Use implicit flow instead of PKCE to be more resilient
        debug: false // Disable debug logs to reduce console noise
      },
      global: {
        headers: {
          'apikey': SUPABASE_PUBLISHABLE_KEY,
          'Content-Type': 'application/json'
        }
      }
    }
  );
  
  return clientInstance;
};

// Export the singleton instance
export const supabase = getSupabaseClient();

// Export a helper function to clear auth state in case of corruption
export const resetAuthState = async () => {
  try {
    // First try storage direct removal for cleaner state
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (e) {
      console.log('Error accessing localStorage during resetAuthState');
    }
    
    // Then try official API signout
    try {
      await supabase.auth.signOut({ scope: 'global' });
    } catch (e) {
      console.log('Error during supabase signout in resetAuthState');
    }
    
    return { success: true };
  } catch (error) {
    return { success: false, error };
  }
};

// Enhanced signOut function with better cleanup
export const forceSignOut = async () => {
  try {    
    // First remove the token directly from storage
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (storageError) {
      // Silent fail
    }
    
    // Try to sign out through the API (all devices)
    try {
      await supabase.auth.signOut({ scope: 'global' });
    } catch (apiError) {
      // Silent fail
    }
    
    // Clear URL-based auth params if present
    if (window.history && window.history.replaceState) {
      const cleanUrl = window.location.pathname;
      window.history.replaceState(null, '', cleanUrl);
    }
    
    return { success: true };
  } catch (cleanupError) {
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (e) {
      // Ignore
    }
    
    return { success: false, error: cleanupError };
  }
};

// Simple session validity check
export const isSessionValid = async () => {
  try {
    const { data } = await supabase.auth.getSession();
    return !!data.session;
  } catch (error) {
    return false;
  }
};
