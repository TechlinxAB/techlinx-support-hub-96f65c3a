
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uaoeabhtbynyfzyfzogp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVhb2VhYmh0YnlueWZ6eWZ6b2dwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MjQzNzksImV4cCI6MjA2MjEwMDM3OX0.hqJiwG2IQindO2LVBg4Rhn42FvcuZGAAzr8qDMhFBTQ";

// Create a custom storage implementation that falls back to memory storage if localStorage isn't available
const createFallbackStorage = () => {
  // In-memory storage fallback
  const inMemoryStorage = new Map<string, string>();
  console.log("Initializing fallback storage mechanism");
  
  return {
    getItem: (key: string) => {
      try {
        // Try localStorage first
        const localStorageValue = localStorage.getItem(key);
        if (localStorageValue !== null) {
          return localStorageValue;
        }
        
        // Fall back to in-memory if needed
        return inMemoryStorage.get(key) || null;
      } catch (error) {
        console.log('Storage getItem fallback used:', key);
        return inMemoryStorage.get(key) || null;
      }
    },
    setItem: (key: string, value: string) => {
      try {
        // Try localStorage first
        localStorage.setItem(key, value);
      } catch (error) {
        console.log('Storage setItem fallback used:', key);
        inMemoryStorage.set(key, value);
      }
    },
    removeItem: (key: string) => {
      try {
        // Try localStorage first
        localStorage.removeItem(key);
      } catch (error) {
        console.log('Storage removeItem fallback used:', key);
        inMemoryStorage.delete(key);
      }
    }
  };
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create and export the supabase client with proper typing
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: createFallbackStorage(),
      persistSession: true,
      autoRefreshToken: true,
      // Reduce debug level to avoid console noise
      debug: true // Enable debug temporarily to troubleshoot auth issues
    },
    global: {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Content-Type': 'application/json'
      },
      // Update fetch parameters for CORS and authentication
      fetch: (url, options = {}) => {
        // Properly type the options object to include headers property
        const fetchOptions = options as { headers?: Record<string, string> };
        const headers = fetchOptions.headers || {};
        
        return fetch(url, {
          ...options,
          credentials: 'include', // Include credentials in the request
          headers: {
            ...headers,
            'apikey': SUPABASE_PUBLISHABLE_KEY,
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          }
        });
      }
    }
  }
);

// Add a listener to log auth state changes for debugging
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session ? 'Session exists' : 'No session');
});
